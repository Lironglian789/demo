1.	定义：C++编写的JS运行环境，可以解析JS代码并提供很多系统级别的API。
2.	指令：node –v查看版本，node+enter 进入JS编写环境，Ctrl+C两次退出，path查看已配置的环境变量
3.	进程和线程的关系：
计算机的核心是CPU,承担所有的计算任务，一个cpu一次只能运行一个进程
进程：一个进程至少包含一个线程,并且同一时刻一个进程只能运行一个线程
进程里面的内存空间是共享的，每个线程都可以使用这些共享内存，空间的大小不一样，有些内存只能一个线程使用，等到使用完毕才能其他线程使用
锁：共享的区域局部私有化--------nodeJS没有
同步和异步任务：
异步-------多核（CPU）     单核：相对异步  （执行速度够快）
NodeJS是单线程的，多进程，配合异步，形成非阻塞的IO操作（单线程异步）[优点]
IO操作：磁盘的读写，数据的输入和输出等     一般是阻塞的

4.	node文件路径
声明 使用 nodeJS运行文件，后面接入的是 运行的文件路径
  __dirname  文件所在的文件夹路径
__filename  文件所在的路径
cd 文件名 进入
cd.. 退出
ctrl+c 手动跳出当前执行环境
nodeJS运行文件时，程序执行完毕  ||  出现错误-------跳出
异步：setInterval   setTimeout
同步任务： 代码有顺序，自上而下执行
Console.log
注：同步任务和异步任务执行的时候，无论位置在哪里，同步任务永远优先执行
Process 显示当前运行nodeJS里面的所有进程信息和浏览器里面的window作比较
       全局对象    setInterval      setTimeout…
5.	module
(1)	命名冲突：命名空间
(2)	文件依赖：模块===》包（加密功能）
引入文件===》require(“路径”)
文件（打开）暴露
module.exports   ||   exports
内置模块：
nodeJS自带的  ===》只要你有nodeJS就会有的模块
fs  文件系统模块
（1）	文件 文件夹===》文件系统
（2）	操作：读、写    创建、删除、重命名、判断文件状态
path：小工具  处理路径
